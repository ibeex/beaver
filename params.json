{"google":"","body":"Installation\r\n============\r\n\r\nUsing PIP:\r\n\r\nFrom Github::\r\n\r\n    pip install git+git://github.com/josegonzalez/beaver.git#egg=beaver\r\n\r\nFrom PyPI::\r\n\r\n    pip install beaver==1\r\n\r\nUsage\r\n=====\r\n\r\nusage::\r\n\r\n    beaver [-h] [-r {worker,interactive}] [-m {bind,connect}] [-p PATH]\r\n                     [-f FILES [FILES ...]] [-t TRANSPORT]\r\n\r\noptional arguments::\r\n\r\n    -h, --help            show this help message and exit\r\n    -m {bind,connect}, --mode {bind,connect}\r\n                          bind or connect mode\r\n    -p PATH, --path PATH  path to log files\r\n    -f FILES [FILES ...], --files FILES [FILES ...]\r\n                          space-separated filelist to watch. Overrides --path\r\n                          argument\r\n    -t {amqp,redis,stdout}, --transport {amqp,redis,stdout}\r\n                      log transport method\r\n\r\nBackground\r\n==========\r\n\r\nBeaver provides an lightweight method for shipping local log files to Logstash. It does this using either redis, stdin, zeromq as the transport. This means you'll need a redis, stdin, zeromq input somewhere down the road to get the events.\r\n\r\nEvents are sent in logstash's ``json_event`` format. Options can also be set as environment variables.\r\n\r\nExamples\r\n--------\r\n\r\nExample 1: Listen to all files in the default path of /var/log on standard out::\r\n\r\n    beaver\r\n\r\nExample 2: Sending logs from /var/log files to a redis list::\r\n\r\n    REDIS_URL=\"redis://localhost:6379/0\" beaver -t redis\r\n\r\nExample 3: Use environment variables to send logs from /var/log files to a redis list::\r\n\r\n    REDIS_URL=\"redis://localhost:6379/0\" BEAVER_PATH=\"/var/log\" BEAVER_TRANSPORT=redis beaver\r\n\r\nExample 4: Zeromq listening on port 5556 (all interfaces)::\r\n\r\n    ZEROMQ_ADDRESS=\"tcp://*:5556\" beaver -m bind\r\n\r\n    # logstash config:\r\n    input { zeromq {\r\n        type => 'shipper-input'\r\n        mode => 'client'\r\n        topology => 'pushpull'\r\n        address => 'tcp://shipperhost:5556'\r\n      } }\r\n    output { stdout { debug => true } }\r\n\r\nExample 5: Zeromq connecting to remote port 5556 on indexer::\r\n\r\n    ZEROMQ_ADDRESS=\"tcp://indexer:5556\" beaver -m connect\r\n\r\n    # logstash config:\r\n    input { zeromq {\r\n        type => 'shipper-input'\r\n        mode => 'server'\r\n        topology => 'pushpull'\r\n        address => 'tcp://*:5556'\r\n      }}\r\n    output { stdout { debug => true } }\r\n\r\nTodo\r\n====\r\n\r\n* Use python threading + subprocess in order to support usage of ``yield`` across all operating systems\r\n* Fix usage on non-linux platforms - file.readline() does not work as expected on OS X. See above for potential solution\r\n* More transports\r\n* ~Separate tranports into different files so that individual transport requirements are not required on all installations (libzmq)~\r\n* ~Create a python package~\r\n* Ability to specify files, tags, and other  metadata within a configuration file\r\n\r\nCredits\r\n=======\r\n\r\nBased on work from Giampaolo and Lusis::\r\n\r\n    Real time log files watcher supporting log rotation.\r\n\r\n    Original Author: Giampaolo Rodola' <g.rodola [AT] gmail [DOT] com>\r\n    http://code.activestate.com/recipes/577968-log-watcher-tail-f-log/\r\n\r\n    License: MIT\r\n\r\n    Other hacks (ZMQ, JSON, optparse, ...): lusis\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Beaver","tagline":"python daemon that munches on logs and sends their contents to logstash"}